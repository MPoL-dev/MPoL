{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR:root:File `'notebook_setup.py'` not found.\n"
     ]
    }
   ],
   "source": [
    "%run notebook_setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HD143006 Tutorial Part 2\n",
    "\n",
    "This tutorial is part 2 of the HD 143006 tutorial series (part 1 can be found [here](HD143006_part_1.ipynb)).\n",
    "\n",
    "We'll be covering much of the same content in the tutorials on [optimization](../ci-tutorials/optimization.ipynb), [initalizing with the dirty image](../ci-tutorials/initializedirtyimage.ipynb), and [cross validation](../ci-tutorials/crossvalidation.ipynb) as part of an integrated workflow using real data. For more information on a particular step, we recommend referencing the individual tutorials.\n",
    "\n",
    "This tutorial will cover model initialization, optimization, and cross validation, as well as touch on how to use [TensorBoard](https://www.tensorflow.org/tensorboard) to analyze the results.\n",
    "\n",
    "\n",
    "### Loading Data\n",
    "Let's load the data as we did in the previous HD143006 tutorial ([part 1](HD143006_part_1.ipynb)) and create an MPoL Gridder object.\n",
    "\n",
    "*You can download the extracted visibilities (`HD143006_continuum.npz`) directly to your working directory, or use the Astropy `download_file` utility to download it during run time.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "cell_id": "00001-be94721b-eee2-4e2e-96e2-dc65b9fd4f5b",
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 663,
    "execution_start": 1623447169390,
    "source_hash": "4f0f20f8",
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from astropy.io import fits\n",
    "from astropy.utils.data import download_file\n",
    "import torch\n",
    "from torch.utils import tensorboard\n",
    "\n",
    "# downloading extracted visibilities file\n",
    "fname = download_file(\n",
    "    \"https://zenodo.org/record/4904794/files/HD143006_continuum.npz\",\n",
    "    cache=True,\n",
    "    pkgname=\"mpol\",\n",
    ")\n",
    "\n",
    "# load extracted visibilities from npz file\n",
    "d = np.load(fname)\n",
    "uu = d[\"uu\"]\n",
    "vv = d[\"vv\"]\n",
    "weight = d[\"weight\"]\n",
    "data = d[\"data\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "cell_id": "00008-d56e3afe-45cf-4fe5-a4e7-1803f28deec4",
    "deepnote_cell_type": "code",
    "deepnote_to_be_reexecuted": false,
    "execution_millis": 27,
    "execution_start": 1623441758279,
    "source_hash": "b76fed2d"
   },
   "outputs": [],
   "source": [
    "from mpol import gridding, coordinates\n",
    "\n",
    "# we'll assume the same cell_size as before\n",
    "cell_size = 0.003  # arcseconds\n",
    "\n",
    "# creating Gridder object\n",
    "coords = coordinates.GridCoords(cell_size=cell_size, npix=512)\n",
    "gridder = gridding.Gridder(\n",
    "    coords=coords,\n",
    "    uu=uu,\n",
    "    vv=vv,\n",
    "    weight=weight,\n",
    "    data_re=data.real,\n",
    "    data_im=data.imag,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Getting the Dirty Image and Creating the Model\n",
    "\n",
    "First, we will use the Gridder to solve for a dirty image, so that we can\n",
    "\n",
    "1. confirm that we've loaded the visibilities correctly and that the dirty image looks roughly as we'd expect (as in [part 1](HD143006_part_1.ipynb))\n",
    "2. use the dirty image to initialize the RML model image state (as in the [initalizing with the dirty image](../ci-tutorials/initializedirtyimage.ipynb) tutorial)\n",
    "\n",
    "We will use Briggs weighting with `robust=0.0`, since this similar to what the DSHARP team used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "img, beam = gridder.get_dirty_image(weighting=\"briggs\", robust=0.0, unit=\"Jy/arcsec^2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now is also a good time to export the gridded visibilities to a PyTorch dataset, to be used later during the RML imaging loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = (\n",
    "    gridder.to_pytorch_dataset()\n",
    ")  # export the visibilities from gridder to a PyTorch dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's import a [SimpleNet](api.html#mpol.precomposed.SimpleNet) model for RML imaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpol.precomposed import SimpleNet\n",
    "\n",
    "model = SimpleNet(coords=coords, nchan=gridder.nchan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "## Initializing Model with the Dirty Image\n",
    "\n",
    "Before we begin the optimization process, we need to choose a set of starting values for our image model. So long as we run the optimization process to convergence, this starting point could be anything. But, it's also true that \"better\" guesses will lead us to convergence faster. A fairly decent starting guess is the dirty image itself, since it is already a maximum likelihood fit to the data. The problem, though, is that the dirty image contains pixels with negative flux, while by construction our [SimpleNet](api.html#mpol.precomposed.SimpleNet) model enforces image positivity. One solution is to train the RML model such that the mean squared error between its image plane component and the dirty image are minimized. This \"mini\" optimization loop is just to find a starting point for the actual RML optimization loop, which will be described later in this tutorial."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following the [initalizing with the dirty image](../ci-tutorials/initializedirtyimage.html) tutorial, we use PyTorch's [mean squared error](https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html) function to calculate the loss between the RML model image and the dirty image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert the dirty image into a tensor\n",
    "dirty_image = torch.tensor(img.copy())\n",
    "\n",
    "# initialize an optimizer\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.5)\n",
    "loss_fn = torch.nn.MSELoss()  # creating the MSEloss function from Pytorch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "for iteration in range(500):\n",
    "\n",
    "    optimizer.zero_grad()\n",
    "\n",
    "    model.forward()  # get the predicted model\n",
    "    sky_cube = model.icube.sky_cube\n",
    "\n",
    "    loss = loss_fn(sky_cube, dirty_image)  # calculate the loss\n",
    "\n",
    "    loss.backward()  # calculate gradients of parameters\n",
    "    optimizer.step()  # update the parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's visualize the actual dirty image and our \"pseudo-dirty image\" that results from the optimization process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "lines_to_end_of_cell_marker": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 468x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(ncols=2, figsize=(6.5, 4))\n",
    "\n",
    "ax[0].imshow(\n",
    "    np.squeeze(dirty_image.detach().cpu().numpy()),\n",
    "    origin=\"lower\",\n",
    "    interpolation=\"none\",\n",
    "    extent=model.icube.coords.img_ext,\n",
    ")\n",
    "\n",
    "ax[1].imshow(\n",
    "    np.squeeze(model.icube.sky_cube.detach().cpu().numpy()),\n",
    "    origin=\"lower\",\n",
    "    interpolation=\"none\",\n",
    "    extent=model.icube.coords.img_ext,\n",
    ")\n",
    "\n",
    "r = 0.75\n",
    "for a in ax:\n",
    "    a.set_xlim(left=0.75, right=-0.75)\n",
    "    a.set_ylim(bottom=-0.75, top=0.75)\n",
    "    a.axis(\"off\")\n",
    "\n",
    "ax[0].set_title(\"Dirty Image\")\n",
    "_ = ax[1].set_title(\"Pseudo-Dirty Image\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can confirm that the pseudo-dirty image contains no negative flux values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum flux value 0.0014 Jy/arcsec^2\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    \"Minimum flux value {:.4f} Jy/arcsec^2\".format(\n",
    "        np.min(model.icube.sky_cube.detach().cpu().numpy())\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Later in this tutorial, we'll want to run many RML optimization loops with different hyperparameter configurations. To make this process easier, we'll save the model state to disk, making it easy for us restart from the pseudo-dirty image each time. More information on saving and loading models (and the `state_dict`) can be found in the [PyTorch documentation](https://pytorch.org/tutorials/beginner/saving_loading_models.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.save(model.state_dict(), \"model.pt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization utilities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "In this section we'll set up some visualization tools, including [TensorBoard](https://pytorch.org/docs/stable/tensorboard.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that to display the TensorBoard dashboards referenced in this tutorial, you will need to run a TensorBoard instance on your own device. The code necessary to do this is displayed in this tutorial as ``#%tensorboard --logdir <directory>``. Uncomment and execute this IPython line magic command in Jupyter Notebook to open the dashboard."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import os\n",
    "\n",
    "logs_base_dir = \"./logs/\"\n",
    "writer = SummaryWriter(logs_base_dir)\n",
    "os.makedirs(logs_base_dir, exist_ok=True)\n",
    "%load_ext tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "Here we'll define a plotting routine that will visualize the image plane model cube, the image plane residuals, the amplitude of the Fourier plane model, and the amplitude of the Fourier plane residuals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "def log_figure(model, residuals):\n",
    "    \"\"\"\n",
    "    Args:\n",
    "        model: the SimpleNet model instanceS\n",
    "        residuals: the mpol ResidualConnector instance\n",
    "\n",
    "    Returns:\n",
    "        matplotlib figure with plots corresponding to image\n",
    "        plane model cube, the image plane residuals, the amplitude\n",
    "        of the Fourier plane model, and the amplitude of the Fourier\n",
    "        plane residuals.\n",
    "    \"\"\"\n",
    "\n",
    "    # populate residual connector\n",
    "    residuals()\n",
    "\n",
    "    fig, ax = plt.subplots(ncols=2, nrows=2, figsize=(10, 10))\n",
    "    im = ax[0, 0].imshow(\n",
    "        np.squeeze(model.icube.sky_cube.detach().cpu().numpy()),\n",
    "        origin=\"lower\",\n",
    "        interpolation=\"none\",\n",
    "        extent=model.icube.coords.img_ext,\n",
    "    )\n",
    "    plt.colorbar(im, ax=ax[0, 0])\n",
    "\n",
    "    im = ax[0, 1].imshow(\n",
    "        np.squeeze(residuals.sky_cube.detach().cpu().numpy()),\n",
    "        origin=\"lower\",\n",
    "        interpolation=\"none\",\n",
    "        extent=residuals.coords.img_ext,\n",
    "    )\n",
    "    plt.colorbar(im, ax=ax[0, 1])\n",
    "\n",
    "    im = ax[1, 0].imshow(\n",
    "        np.squeeze(torch.log(model.fcube.ground_amp.detach()).cpu().numpy()),\n",
    "        origin=\"lower\",\n",
    "        interpolation=\"none\",\n",
    "        extent=residuals.coords.vis_ext,\n",
    "    )\n",
    "    plt.colorbar(im, ax=ax[1, 0])\n",
    "\n",
    "    im = ax[1, 1].imshow(\n",
    "        np.squeeze(torch.log(residuals.ground_amp.detach()).cpu().numpy()),\n",
    "        origin=\"lower\",\n",
    "        interpolation=\"none\",\n",
    "        extent=residuals.coords.vis_ext,\n",
    "    )\n",
    "    plt.colorbar(im, ax=ax[1, 1])\n",
    "\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training loop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "Now lets encapsulate the training loop into a function which we can easily re-run with different configuration values.\n",
    "\n",
    "To learn more information about the components of this training loop, please see the [Losses API](../api.html#module-mpol.losses)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpol import losses, connectors\n",
    "\n",
    "\n",
    "def train(model, dataset, optimizer, config, writer=None, logevery=50):\n",
    "    model.train()\n",
    "    residuals = connectors.GriddedResidualConnector(model.fcube, dataset)\n",
    "    for iteration in range(config[\"epochs\"]):\n",
    "        optimizer.zero_grad()\n",
    "        vis = model.forward()  # calculate the predicted model\n",
    "        sky_cube = model.icube.sky_cube\n",
    "\n",
    "        loss = (\n",
    "            losses.nll_gridded(vis, dataset)\n",
    "            + config[\"lambda_sparsity\"] * losses.sparsity(sky_cube)\n",
    "            + config[\"lambda_TV\"] * losses.TV_image(sky_cube)\n",
    "            + config[\"entropy\"] * losses.entropy(sky_cube, config[\"prior_intensity\"])\n",
    "            + config[\"TSV\"] * losses.TSV(sky_cube)\n",
    "        )\n",
    "\n",
    "        if (\n",
    "            iteration % logevery == 0\n",
    "        ) and writer is not None:  # logging the loss and image for visualization and analysis\n",
    "            writer.add_scalar(\"loss\", loss.item(), iteration)\n",
    "            writer.add_figure(\"image\", log_figure(model, residuals), iteration)\n",
    "\n",
    "        loss.backward()  # calculate gradient of the parameters\n",
    "        optimizer.step()  # update the model parameters\n",
    "\n",
    "    return loss.item()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets initialize the model to the pseudo-dirty image, set our hyperparameters in a `config` dictionary, and create our optimizer.\n",
    "\n",
    "The hyperparameters (also referred to as scalar prefactors in the [Introduction to Regularized Maxium Likelihood Imaging page](../rml_intro.html). Most of these hyperparameters, such as `lambda_TV` and `entropy` are used in the loss functions and can be read about [here](api.html#module-mpol.losses). We chose these specific values from a past hyperparameter tuning trial, since they result in a decent image but still have a suboptimal crossvalidation score, leaving something for us to do in the crossvalidation loops at the end of this tutorial.\n",
    "\n",
    "Hyperparameter values are not a \"one size fits all\" metric, so if you are working with a different dataset you will most likely find successful images with a different set of hyperparameters. To find your own hyperparameters, we recommend looking into [Ray Tune](https://docs.ray.io/en/master/tune/index.html), [TensorBoard](https://pytorch.org/docs/stable/tensorboard.html), or your favorite hyperparameter tuning library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.load_state_dict(\n",
    "    torch.load(\"model.pt\")\n",
    ")  # load our initialized model from the previous section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = (\n",
    "    {  # config includes the hyperparameters used in the function and in the optimizer\n",
    "        \"lr\": 0.3,\n",
    "        \"lambda_sparsity\": 7.0e-05,\n",
    "        \"lambda_TV\": 0.00,\n",
    "        \"entropy\": 1e-03,\n",
    "        \"prior_intensity\": 1.5e-07,\n",
    "        \"TSV\": 0.00,\n",
    "        \"epochs\": 1000,\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = torch.optim.Adam(\n",
    "    model.parameters(), lr=config[\"lr\"]\n",
    ")  # create our optimizer, using the learning rate from config"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to run the training loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tquinn39/opt/anaconda3/lib/python3.7/site-packages/torch/autograd/__init__.py:147: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at  ../aten/src/ATen/native/Copy.cpp:219.)\n",
      "  allow_unreachable=True, accumulate_grad=True)  # allow_unreachable flag\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.2544147715286917"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train(model, dataset, optimizer, config, writer=writer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we can see the loss function, images, and residuals for every saved iteration including our final result. To view the loss function, navigate to the scalars tab. To view the four images, be sure your window is wide enough to navigate to the images tab within TensorBoard. The images, in order from left-right top-bottom are: image cube representation, imaged residuals, visibility amplitudes of model on a log scale, residual amplitudes on a log scale. You can use the slider to view different iterations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %tensorboard --logdir {logs_base_dir}\n",
    "## uncomment the above line when running to view TensorBoard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cross Validation\n",
    "\n",
    "Now we will move onto cross validation, which is a technique used to assess model validity. The general idea is that we store some fraction of the dataset as a test dataset and using the remaining data to train the model. Once the model is trained, it is used to predict the missing values of the data in the test dataset. These predicted values are compared to the values from the test dataset, producing a cross validation score.\n",
    "\n",
    "The advantage of $k$-fold cross validation is that it allows one dataset to be used to train the model multiple times since it can take different chunks out for the test dataset. For more information see the [Cross Validation tutorial](../ci-tutorials/crossvalidation.ipynb).\n",
    "\n",
    "Just like in the previous section we will be viewing our results in TensorBoard, with the addition of the cross validation score log."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "Cross validation requires a `test` function (to determine the cross validation score) and a `cross_validate` function (to utilize cross validation with the previous `train` function). We implement these below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test(model, dataset):\n",
    "    model.eval()\n",
    "    vis = model.forward()\n",
    "    loss = losses.nll_gridded(\n",
    "        vis, dataset\n",
    "    )  # calculates the loss function that goes to make up the cross validation score\n",
    "    return loss.item()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cross_validate(model, config, k_fold_datasets, MODEL_PATH, writer=None):\n",
    "    test_scores = []\n",
    "\n",
    "    for k_fold, (train_dset, test_dset) in enumerate(k_fold_datasets):\n",
    "\n",
    "        # reset model\n",
    "        model.load_state_dict(torch.load(MODEL_PATH))\n",
    "\n",
    "        # create a new optimizer for this k_fold\n",
    "        optimizer = torch.optim.Adam(model.parameters(), lr=config[\"lr\"])\n",
    "\n",
    "        # train for a while\n",
    "        train(model, train_dset, optimizer, config, writer=writer)\n",
    "        # evaluate the test metric\n",
    "        test_scores.append(test(model, test_dset))\n",
    "\n",
    "    # aggregate all test scores and sum to evaluate cross val metric\n",
    "    test_score = np.sum(np.array(test_scores))\n",
    "\n",
    "    # adds cross validation score\n",
    "    if writer is not None:\n",
    "        writer.add_scalar(\"Cross Validation\", test_score)\n",
    "\n",
    "    return test_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our functions defined, we need to divide our dataset into training and test datasets. There are many ways of going about this; here we are splitting the dataset into radial and azimuthal chunks in a dartboard-like pattern. MPoL's `Dartboard` presents an easy built-in way to get the polar coordinate grid of a dataset. To to read more, please see [Choosing the K-folds](../ci-tutorials/crossvalidation.html#Choosing-the-K-folds) in the [Cross Validation tutorial](../ci-tutorials/crossvalidation.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpol import datasets\n",
    "\n",
    "# create a radial and azimuthal partition for the dataset\n",
    "dartboard = datasets.Dartboard(coords=coords)\n",
    "\n",
    "# create cross validator using this \"dartboard\"\n",
    "k = 5\n",
    "cv = datasets.KFoldCrossValidatorGridded(dataset, k, dartboard=dartboard, npseed=42)\n",
    "\n",
    "# ``cv`` is a Python iterator, it will return a ``(train, test)`` pair of ``GriddedDataset``s for each iteration.\n",
    "# Because we'll want to revisit the individual datasets\n",
    "# several times in this tutorial, we're storing them into a list\n",
    "\n",
    "k_fold_datasets = [(train, test) for (train, test) in cv]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`MODEL_PATH` is defined below so we can reset the model between cross validation loops by reloading the `model.pt` we saved, which contained the state of the model initialized to the pseudo-dirty image. We will run the cross validation loops for a few different configurations, starting with the hyperparameters found in `config`, defined above in this tutorial. This configuration has been included in the following cell for convenience."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "MODEL_PATH = \"model.pt\"\n",
    "\n",
    "new_config = (\n",
    "    {  # config includes the hyperparameters used in the function and in the optimizer\n",
    "        \"lr\": 0.3,\n",
    "        \"lambda_sparsity\": 7.0e-05,\n",
    "        \"lambda_TV\": 0.00,\n",
    "        \"entropy\": 1e-03,\n",
    "        \"prior_intensity\": 1.5e-07,\n",
    "        \"TSV\": 0.00,\n",
    "        \"epochs\": 1000,\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to run our cross validation loop. We'll run this a few times while changing hyperparameters in the config to lower the cross validation score then compare all three with TensorBoard."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Score: 194.23954676833822\n"
     ]
    }
   ],
   "source": [
    "# new directory to write the progress of our first cross val. loop to\n",
    "cv_log_dir1 = logs_base_dir + \"cv/cv1/\"\n",
    "cv_writer1 = SummaryWriter(cv_log_dir1)\n",
    "os.makedirs(cv_log_dir1, exist_ok=True)\n",
    "\n",
    "cv_score1 = cross_validate(\n",
    "    model, new_config, k_fold_datasets, MODEL_PATH, writer=cv_writer1\n",
    ")\n",
    "print(f\"Cross Validation Score: {cv_score1}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Score: 36.22754376079247\n"
     ]
    }
   ],
   "source": [
    "# new directory to write the progress of our second cross val. loop to\n",
    "cv_log_dir2 = logs_base_dir + \"cv/cv2/\"\n",
    "cv_writer2 = SummaryWriter(cv_log_dir2)\n",
    "os.makedirs(cv_log_dir2, exist_ok=True)\n",
    "\n",
    "new_config = (\n",
    "    {  # config includes the hyperparameters used in the function and in the optimizer\n",
    "        \"lr\": 0.3,\n",
    "        \"lambda_sparsity\": 1.0e-4,\n",
    "        \"lambda_TV\": 1.0e-4,\n",
    "        \"entropy\": 1e-02,\n",
    "        \"prior_intensity\": 2.0e-09,\n",
    "        \"TSV\": 1.0e-6,\n",
    "        \"epochs\": 850,\n",
    "    }\n",
    ")\n",
    "cv_score2 = cross_validate(\n",
    "    model, new_config, k_fold_datasets, MODEL_PATH, writer=cv_writer2\n",
    ")\n",
    "print(f\"Cross Validation Score: {cv_score2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation Score: 20.560350171458722\n"
     ]
    }
   ],
   "source": [
    "# new directory to write the progress of our third cross val. loop to\n",
    "cv_log_dir3 = logs_base_dir + \"cv/cv3/\"\n",
    "cv_writer3 = SummaryWriter(cv_log_dir3)\n",
    "os.makedirs(cv_log_dir3, exist_ok=True)\n",
    "\n",
    "new_config = (\n",
    "    {  # config includes the hyperparameters used in the function and in the optimizer\n",
    "        \"lr\": 0.3,\n",
    "        'lambda_sparsity': 1.8e-4, \n",
    "        'lambda_TV': 2.3e-5, \n",
    "        'entropy': 7.4e-06, \n",
    "        'prior_intensity': 5.0e-07, \n",
    "        'TSV': 1.0e-02,\n",
    "        \"epochs\": 1000,\n",
    "    }\n",
    ")\n",
    "\n",
    "cv_score3 = cross_validate(\n",
    "    model, new_config, k_fold_datasets, MODEL_PATH, writer=cv_writer3\n",
    ")\n",
    "print(f\"Cross Validation Score: {cv_score3}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is the final result for our model with the lowest cross validation score:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7fd4cc81c0d0>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "im = ax.imshow(\n",
    "    np.squeeze(model.icube.sky_cube.detach().cpu().numpy()),\n",
    "    origin=\"lower\",\n",
    "    interpolation=\"none\",\n",
    "    extent=model.icube.coords.img_ext,\n",
    ")\n",
    "plt.colorbar(im)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And you can visualize all of the results in TensorBoard.\n",
    "\n",
    "It may seem strange that the lowest total converged loss values do not correspond with the lowest cross validation scores. This is just a consequence of the fact that we are working with loss functions that correspond to the *logarithm* of the likelihood function and prior functions. This means that the normalization prefactors aren't required for each optimization loop (so we don't calculate them), which also has the consequence that we can't directly compare loss values across different hyperparameter settings (this is the role of cross-validation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "cv_log_dir = logs_base_dir + \"cv/\"\n",
    "# %tensorboard --logdir {cv_log_dir}\n",
    "## uncomment the above line when running to view TensorBoard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hopefully this tutorial has provided an introduction to RML imaging with an actual ALMA dataset.\n",
    "\n",
    "We started by initializing the RML model to a pseudo-dirty image, which allowed our model converge to the optimal image in fewer iterations.\n",
    "\n",
    "We also used cross validation to help us understand how well the model fits the dataset. Using TensorBoard, we were able to visualize how changing hyperparameters can result in a lower cross validation score, and therefore a better image, if done correctly. The process of changing the hyperparameters can be automated using a hyperparameter tuning library which we will explore in Part 3 of this tutorial series.\n",
    "\n",
    "Of the three hyperparameter configurations that we cross-validated above, the third has the lowest cross validation score, and so we might reasonably conclude that this image most closely matches reality because it generates well to new data.\n",
    "\n",
    "If you would like to compare these results yourself, please run TensorBoard locally. In the next part of the HD143006 tutorial we will be expanding on how to analyze the results of the training, optimization loops, hyperparameter tuning, and exploring the full pipeline of data analysis which can be adapted to any real world data."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "encoding": "# -*- coding: utf-8 -*-"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
